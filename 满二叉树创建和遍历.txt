#include <stdio.h>
#include <stdlib.h>

struct Btnode
{
	int d;
	Btnode *lchild;
	Btnode *rchild;
};

Btnode* create(int n)
{
	if (n >= 16)
		return NULL;

	Btnode *p = new Btnode;
	p->d = n;

	p->lchild = create(2*n);
	p->rchild = create(1+2*n);

	return p;
}

Btnode* create_full_tree(int top_root_v)
{
	Btnode *root = new Btnode;
	root->d = top_root_v;
	
	root->lchild = create(2*root->d);
	root->rchild = create(1+2*root->d);
	return root;
}


static int v = 1;
void pretravel_modify(Btnode *root)
{
	if (NULL == root)
		return;
	root->d = v;
	v++;
	pretravel_modify(root->lchild);
	pretravel_modify(root->rchild);
}

void pretravel(Btnode *root)
{
	if (NULL == root)
		return;
	printf("%d\n", root->d);
	pretravel(root->lchild);
	pretravel(root->rchild);
}

void midtravel(Btnode *root)
{
	if (NULL == root)
		return;
	midtravel(root->lchild);
	printf("%d\n", root->d);
	midtravel(root->rchild);
}

void free_tree(Btnode *root)
{
	if (NULL == root)
		return;
	Btnode *lchild = root->lchild;
	Btnode *rchild = root->rchild;
	free_tree(lchild);
	free_tree(rchild);
	free(root);
}

int  main()
{
	Btnode *root = create_full_tree(1);
	pretravel_modify(root);
	pretravel(root);

	printf("\n\n\n");
	midtravel(root);

	free_tree(root);
	root = NULL;
	printf("\n\n\n");
	midtravel(root);

	return 0;
}

